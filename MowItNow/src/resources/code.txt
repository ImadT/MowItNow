// Scala File handling program
import scala.collection.mutable
import scala.io.Source
import sys.process._


class Tendeuse(var x:Int = 0, var y:Int = 0, var orientation:Char = 'N', var pelouse:Array[Int] = Array(3,3), list_instructions:Array[Char] = Array()){
  def instruction_suivante(mouvement_suivant: Char): Unit ={
    mouvement_suivant match{
      case 'A' =>
        orientation match {
          case 'N' => if (y<pelouse(1)) y = y + 1
          case 'E' => if (x<pelouse(0)) x = x + 1
          case 'W' => if (x>0) x = x - 1
          case 'S' => if (y>0) y = y - 1
        }
      case 'D' =>
        orientation = orientation match {
          case 'N' => 'E'
          case 'E' => 'S'
          case 'W' => 'N'
          case 'S' => 'W'
        }
      case 'G' =>
        orientation = orientation match {
          case 'N' => 'W'
          case 'E' => 'N'
          case 'W' => 'S'
          case 'S' => 'E'
        }
      case _ => println("aucun mouvement ne sera possible")
    }
  }

  def  executer_les_instructions(): Unit ={
    for (i <- list_instructions) {
      instruction_suivante(i)
      //println(f"x = $x, y = $y")
    }
  }

}


object Exercice1 {

  def main(args: Array[String]): Unit = {

    println("Hello world!")
/*
    var tendeuse = new Tendeuse(1,2,'N',Array(5,5), Array('G','A','G','A','G','A','G','A','A'))
    tendeuse.executer_les_instructions()

    println(f"x = ${tendeuse.x} et y = ${tendeuse.y}")

    // chemin
    def cmd(cmd: String) = cmd.!!
    println(cmd(s"pwd"))
*/
    // la collection pour stocker les tendeuses
    var tendeusesMap:mutable.Map[String,Tendeuse] = scala.collection.mutable.Map()
    //tendeusesMap("tendeuse") = tendeuse

    /*
    val str = "a b c d e"
    val split   = str.split(' ')
    print(split(0))
     */



    try{
      val fSource = Source.fromFile("./src/resources/test1.txt")


      var iterator_ligne:Int = 1
      var x = 0
      var y = 0
      var orientation = 'N'
      var pelouse = new Array[Int](2)
      var instructions:Array[Char] = Array()


      for(line<-fSource.getLines)
      {
        if (iterator_ligne == 1){
          val pelouseStr:Array[String] = line.split(" ")
          //pelouse = for ( element <- pelouseStr ) yield element.toInt
          pelouse = pelouseStr.map(_.toInt)

          iterator_ligne +=1
        }
        else{
          if(iterator_ligne%2==0){
            val position_initial_du_tendeuse:Array[String] = line.split(" ")
            x = position_initial_du_tendeuse(0).toInt
            y = position_initial_du_tendeuse(1).toInt
            orientation = position_initial_du_tendeuse(2).charAt(0)

            iterator_ligne +=1
          }
          else{
            instructions = line.toCharArray  //Array(line).map(_.charAt(0))

            tendeusesMap(f"Tendeuse ${iterator_ligne/2}") = new Tendeuse(x,y,orientation,pelouse,instructions)


            iterator_ligne +=1
          }
        }
        println(line)
      }

      println("La position finale des tondeuses :")
      for ((nom_tendeuse,tendeuse_i) <- tendeusesMap){
        tendeuse_i.executer_les_instructions()
        println(f"${nom_tendeuse} : ${tendeuse_i.x} ${tendeuse_i.y} ${tendeuse_i.orientation}")
      }
/*
      for(line<-fSource.getLines)
      {
        for (i <- Array(line)){
          print(i)
        }
      }
*/

      // closing file
      fSource.close()


    } catch {
      case ex : Exception => ex.printStackTrace()
    }


  }

}





5 10
12 12 N
AAAAXAAAGA
3 3 E
AADAADADDA